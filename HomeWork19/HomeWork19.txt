1.Creating objects
  -->var obj={
			  property1: "value1",
			  property2: "value2",
			  .
			  .
			  .
			  .
			  }

  -->var obj= new Object()
     obj.property1 = "value1";
     obj.property2 = "value2";

  Reference:
  http://www.w3schools.com/js/js_objects.asp

  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects


2.For in loop
  The JavaScript for/in statement loops through the properties of an object.

  Reference:
  http://www.w3schools.com/js/js_loop_for.asp


3.hasOwnProperty(prop)
  The hasOwnProperty() method returns a boolean indicating whether the object has the specified property.
  The hasOwnProperty method returns true if object has a property of the specified name, false if it does not. This method does not check the properties in the object's prototype chain; the property must be a member of the object itself.

  Reference:
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty

  https://msdn.microsoft.com/library/328kyd6z(v=vs.94).aspx


4.object.keys()
  The Object.keys() method returns an array of a given object's own enumerable properties, in the same order as that provided by a for...in loop (the difference being that a for-in loop enumerates properties in the prototype chain as well).

  Reference:
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys

  https://msdn.microsoft.com/library/ff688127(v=vs.94).aspx


8.this keyword
  In JavaScript this always refers to the “owner” of the function we're executing, or rather, to the object that a function is a method of.

  Reference:
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this

  http://quirksmode.org/js/this.html


5.The Object.defineProperty() method defines a new   
  property directly on an object, or modifies an existing property on an object, and returns the object.

  Reference:
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty

  https://msdn.microsoft.com/en-us/library/dd548687(v=vs.94).aspx


6.enumerable
  true if and only if this property shows up during enumeration of the properties on the corresponding object.
  Defaults to false.

  value
  The value associated with the property. Can be any valid JavaScript value (number, object, function, etc).
  Defaults to undefined.

  writable
  true if and only if the value associated with the property may be changed with an assignment operator.
  Defaults to false.


  get
  A function which serves as a getter for the property, or undefined if there is no getter. The function return will be used as the value of property.
  Defaults to undefined.

  set
  A function which serves as a setter for the property, or undefined if there is no setter. The function will receive as only argument the new value being assigned to the property.
  Defaults to undefined.

  Reference:
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty


7.new operator
  The new operator creates an instance of a user-defined object type or of one of the built-in object types that has a constructor function.

  Example:
  var x = new obj(param);

  Reference:
  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new


9.Window Object
  Represents an open window. 

  The window object has these types of members:
	  Events
	  Methods
	  Properties

  Example:
    <body onload="console.log('Document is loaded!');">

  Reference:
  https://msdn.microsoft.com/en-us/library/ms535873(v=vs.85).aspx